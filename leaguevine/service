#!/usr/bin/python
import sys
sys.path.append('..')
import os
import time
import pytz
import json
import requests
import traceback
import calendar
from datetime import datetime
from operator import itemgetter

# from hosted import CONFIG
#
# CONFIG.restart_on_update()

with file("config.json") as f:
    CONFIG = json.load(f)


de_tz = pytz.timezone('Europe/Amsterdam')

tournaments = {}   # = Windmill divisions
teams = {}
schedule = CONFIG['schedule']

def currentround(datetime):
    # which round is currently being played?
    for round in CONFIG['schedule']['open']:
        round_start = datetime.strptime(round['start'], '%Y-%m-%dT%H:%M:%S')
        round_end = datetime.strptime(round['end'], '%Y-%m-%dT%H:%M:%S')
        if round_start < datetime and datetime < round_end:
            return round['name']

def update(current_datetime):
    global teams
    # pull data from leaguevine
    r = requests.get('http://api.localhost:8000/v1/swiss_rounds/?tournament_id=19746')
    swiss_rounds = r.json()['objects']
    # update schedule with extra information
    for swiss_round in swiss_rounds:
        for round in schedule['open']:
            print round['start'], swiss_round['start_time'][0:19]
            if round['start']==swiss_round['start_time'][0:19]:
                round.update(swiss_round)

    # current games
    for round in CONFIG['schedule']['open']:
        round_start = datetime.strptime(round['start'], '%Y-%m-%dT%H:%M:%S')
        round_end = datetime.strptime(round['end'], '%Y-%m-%dT%H:%M:%S')
        if round_start < current_datetime and current_datetime <= round_end:
            curgames = {'start_time': round_start.strftime('%A %-H:%M')}
            curgames['games'] = []
            for game in round['games']:
                curgames['games'].append({'team_1': u'flag:{0} {1}'.format(teams[game['team_1_id']]['country'], game['team_1']['short_name']),
                                      'team_2': game['team_2']['short_name'],
                                      'team_1_score': game['team_1_score'],
                                      'team_2_score': game['team_2_score'],
                                      'field': game['game_site']['name']
                                     })
            # current standings
            curgames['standings'] = round['standings']
            for stand in curgames['standings']:
                stand['team'] = stand['team']['short_name']

            with file("current_games.json.new", "wb") as f:
                f.write(json.dumps(curgames,
                    ensure_ascii=False,
                    indent=2,
                    separators=(',',':')
                ).encode('utf8'))
            os.rename("current_games.json.new", "../current_games.json")
            print >>sys.stderr, "updated games"


def leaguevine_basic_info():
    global teams
    tournament_ids = [t['tournament_id'] for name,t in CONFIG['tournaments'].items()]
    # retrieve tournament info  ( = Windmill divisions)
    url = 'http://api.localhost:8000/v1/tournaments/'
    payload = {'tournament_ids': '{0}'.format(tournament_ids).replace(' ', '')}
    r = requests.get(url, params=payload)
    tournaments = r.json()['objects']

    # retrieve tournament teams (to figure out which teams are playing in which tournaments
    payload['fields'] = '[team_id,tournament_id]'
    payload['limit'] = 200
    r = requests.get('http://api.localhost:8000/v1/tournament_teams/', params=payload)
    result = r.json()
    if result['meta']['next']:
        print >>sys.stderr, "only 200 teams were loaded, but there are more!"
    all_team_ids = []
    for tournament in tournaments:
        tournament['team_ids'] = [x['team_id'] for x in result['objects'] if x['tournament_id']==tournament['id']]
        all_team_ids.extend(tournament['team_ids'])
    # make all_team_ids unique and sorted
    all_team_ids = sorted(set(all_team_ids))

    # retrieve all team info
    url = 'http://api.localhost:8000/v1/teams/'
    payload = {'team_ids': '{0}'.format(all_team_ids).replace(' ',''),
               'limit': 200}
    r = requests.get(url, params=payload)
    result = r.json()
    teams = {team['id']: team for team in result['objects']}

    return True

def main():
    leaguevine_basic_info()
    update(datetime(2015, 06, 12, 12, 31, 00))


    # load team info once
    leaguevine_basic_info()

    return False
    while 1:
        try:
            events = update()
        except:
            print >>sys.stderr, "fail"
            traceback.print_exc()
            time.sleep(120)
            continue

        with file("workshops.json.new", "wb") as f:
            f.write(json.dumps([dict(
                text = "%s: %s @ %s" % (
                    event['start_str'], 
                    event['name'], 
                    event['place'], 
                ),
                start_unix = event['start_unix'],
            ) for event in sorted(events, key=itemgetter('start_unix'))], 
                ensure_ascii=False,
                separators=(',',':')
            ).encode('utf8'))
        os.rename("workshops.json.new", "../workshops.json")

        print >>sys.stderr, "updated workshops"

        time.sleep(600)

if __name__ == "__main__":
    main()
