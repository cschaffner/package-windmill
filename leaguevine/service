#!/usr/bin/python
import sys
sys.path.append('..')
import os
import time
import pytz
import json
import requests
import traceback
import calendar
from datetime import datetime
from operator import itemgetter

# from hosted import CONFIG
#
# CONFIG.restart_on_update()

with file("config.json") as f:
    CONFIG = json.load(f)



de_tz = pytz.timezone('Europe/Amsterdam')

tournaments = {}   # = Windmill divisions
teams = {}


def update(tournament_id):
    # pull data from leaguevine
    r = requests.get('http://api.localhost:8000/v1/swiss_rounds/?tournament_id=19747&round_number=2')
    swiss_round = r.json()['objects'][0]

    out = []
    for day in days:
        for game in swiss_round['games']:
            for event in events:
                date = datetime.strptime(event['date'][:-6], "%Y-%m-%dT%H:%M:%S")
                date = date.replace(tzinfo=de_tz).astimezone(pytz.utc)
                start_unix = calendar.timegm(date.timetuple())
                out.append(dict(
                    start_unix = start_unix,
                    start_str = event['start'],
                    name = event['title'],
                    place = event['room'],
                ))
    return out

def leaguevine_basic_info():
    # retrieve tournament info  ( = Windmill divisions)
    url = 'http://api.localhost:8000/v1/tournaments/'
    payload = {'tournament_ids': '{0}'.format(CONFIG['tournament_ids']).replace(' ', '')}
    r = requests.get(url, params=payload)
    tournaments = r.json()['objects']

    # retrieve tournament teams (to figure out which teams are playing in which tournaments
    payload['fields'] = '[team_id,tournament_id]'
    payload['limit'] = 200
    r = requests.get('http://api.localhost:8000/v1/tournament_teams/', params=payload)
    result = r.json()
    if result['meta']['next']:
        print >>sys.stderr, "only 200 teams were loaded, but there are more!"
    all_team_ids = []
    for tournament in tournaments:
        tournament['team_ids'] = [x['team_id'] for x in result['objects'] if x['tournament_id']==tournament['id']]
        all_team_ids.extend(tournament['team_ids'])
    # make all_team_ids unique and sorted
    all_team_ids = sorted(set(all_team_ids))

    # retrieve all team info
    url = 'http://api.localhost:8000/v1/teams/'
    payload = {'team_ids': '{0}'.format(all_team_ids).replace(' ','')}
    r = requests.get(url, params=payload)
    result = r.json()
    teams = result['objects']

    return True

def main():
    # load team info once
    leaguevine_basic_info()

    return False
    while 1:
        try:
            events = update()
        except:
            print >>sys.stderr, "fail"
            traceback.print_exc()
            time.sleep(120)
            continue

        with file("workshops.json.new", "wb") as f:
            f.write(json.dumps([dict(
                text = "%s: %s @ %s" % (
                    event['start_str'], 
                    event['name'], 
                    event['place'], 
                ),
                start_unix = event['start_unix'],
            ) for event in sorted(events, key=itemgetter('start_unix'))], 
                ensure_ascii=False,
                separators=(',',':')
            ).encode('utf8'))
        os.rename("workshops.json.new", "../workshops.json")

        print >>sys.stderr, "updated workshops"

        time.sleep(600)

if __name__ == "__main__":
    main()
