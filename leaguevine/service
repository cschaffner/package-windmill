#!/usr/bin/python
import sys

sys.path.append('..')
import os
import time
import pytz
import json
import requests
import traceback
import calendar
from datetime import datetime

from hosted import CONFIG

CONFIG.restart_on_update()

with file("windmill2015.json") as f:
    WINDMILL = json.load(f)

de_tz = pytz.timezone('Europe/Amsterdam')

tournaments = {}  # = Windmill divisions
teams = {}
schedule = WINDMILL['schedule']

HOST = 'https://api.leaguevine.com/v1'
LOCALHOST = 'http://api.localhost:8000/v1'
# HOST = LOCALHOST

def lastround(datetime):
    # which round is currently being played?
    lastround = WINDMILL['schedule']['open'][0]
    lastround_start = datetime.strptime(lastround['start'], '%Y-%m-%dT%H:%M:%S')
    for round in WINDMILL['schedule']['open']:
        round_start = datetime.strptime(round['start'], '%Y-%m-%dT%H:%M:%S')
        round_end = datetime.strptime(round['end'], '%Y-%m-%dT%H:%M:%S')
        if round_start > lastround_start:
            lastround = round

    return lastround


def update(division='open'):
    tournament_id = WINDMILL['tournaments'][division]['tournament_id']
    # pull data from leaguevine
    r = requests.get('{0}/swiss_rounds/?tournament_id={1}'.format(HOST, tournament_id))
    swiss_rounds = r.json()['objects']
    # update schedule with extra information
    for swiss_round in swiss_rounds:
        # find the round in schdule[division] which corresponds to this swissround
        round = next((x for x in schedule[division] if x['start']==swiss_round['games'][0]['start_time'][0:19]), None)
        if round:
            round.update(swiss_round)
        else:
            print >> sys.stderr, "no matching round found, serious error!"
    # also update brackets here
    # TODO


def current_games(division='open', current_datetime=datetime.now()):
    print >> sys.stderr, "starting to update {0} division".format(division)

    tournament_id = WINDMILL['tournaments'][division]['tournament_id']
    # Check for games in this tournament that start later than now
    url = '{0}/games/'.format(HOST)
    payload = {'tournament_id': tournament_id,
               'starts_after': current_datetime.strftime('%Y-%m-%dT%H:%M:%S+02:00'),
               'limit': 50,
               'order_by': "['start_time','game_site_id']"}
    r = requests.get(url, params=payload)
    if r.json()['meta']['total_count'] == 0:
        # try 2 hours earlier (to catch the last round)
        payload['starts_after'] = (current_datetime-datetime.timedelta(hours=2)).strftime('%Y-%m-%dT%H:%M:%S+02:00')
        r = requests.get(url, params=payload)
        if r.json()['meta']['total_count'] == 0:
            print >> sys.stderr, "error: no games found"
    if r.json()['meta']['total_count'] > 22:
        print >> sys.stderr, "error: loaded two rounds instead of a single one"

    games = r.json()['objects']
    games_start = datetime.strptime(games[0]['start_time'], '%Y-%m-%dT%H:%M:%S+02:00')

    for round in WINDMILL['schedule'][division]:
        round_start = datetime.strptime(round['start'], '%Y-%m-%dT%H:%M:%S')

        if round_start == games_start:
            curgames = {'start_time': round_start.strftime('%A %-H:%M'),
                        'round_name': round['name'],
                        'games': [],
                        'standings': round['standings']}

            # current standings
            # needs to be adjusted if Swissround higher than 5, because the 8 playoff teams are not in there anymore
            if round['round_number'] > 5:
                for stand in curgames['standings']:
                    stand['ranking'] += 8

            # TODO: figure out the "standings" in the playoff brackets and insert into standings

            for stand in curgames['standings']:
                stand['team'] = u'flag:{0} {1}'.format(teams[stand['team_id']]['country'].lower(), stand['team']['short_name'])

            break


    for game in games:
        if game['team_2_id'] and datetime.strptime(game['start_time'], '%Y-%m-%dT%H:%M:%S+02:00') == games_start:  # not a  BYE  and  same start as first game
            curgames['games'].append({'team_1': game['team_1']['short_name'],
                                      'team_2': game['team_2']['short_name'],
                                      'team_1_score': game['team_1_score'],
                                      'team_2_score': game['team_2_score'],
                                      'team_1_country': teams[game['team_1_id']]['country'].lower(),
                                      'team_2_country': teams[game['team_2_id']]['country'].lower(),
                                      'field': game['game_site']['name'],
                                      'is_final': game['is_final'],
                                      })

    with file("current_games.json.new", "wb") as f:
        f.write(json.dumps(curgames,
                           ensure_ascii=False,
                           indent=2,
                           separators=(',', ':')
                           ).encode('utf8'))
    os.rename("current_games.json.new", "../current_games_{0}.json".format(division))

    print >> sys.stderr, "updated current games and standings of {0} division".format(division)



def leaguevine_basic_info():
    global teams
    tournament_ids = [t['tournament_id'] for name, t in WINDMILL['tournaments'].items()]
    # retrieve tournament info  ( = Windmill divisions)
    url = '{0}/tournaments/'.format(HOST)
    payload = {'tournament_ids': '{0}'.format(tournament_ids).replace(' ', '')}
    r = requests.get(url, params=payload)
    tournaments = r.json()['objects']

    # retrieve tournament teams (to figure out which teams are playing in which tournaments
    payload['fields'] = '[team_id,tournament_id]'
    payload['limit'] = 200
    r = requests.get('{0}/tournament_teams/'.format(HOST), params=payload)
    result = r.json()
    if result['meta']['next']:
        print >> sys.stderr, "only 200 teams were loaded, but there are more!"
    all_team_ids = []
    for tournament in tournaments:
        tournament['team_ids'] = [x['team_id'] for x in result['objects'] if x['tournament_id'] == tournament['id']]
        all_team_ids.extend(tournament['team_ids'])
    # make all_team_ids unique and sorted
    all_team_ids = sorted(set(all_team_ids))

    # retrieve all team info
    url = '{0}/teams/'.format(HOST)
    payload = {'team_ids': '{0}'.format(all_team_ids).replace(' ', ''),
               'limit': 200}
    r = requests.get(url, params=payload)
    result = r.json()
    teams = {team['id']: team for team in result['objects']}

    return True


def main():
    leaguevine_basic_info()

    while 1:
        for division in ['open', 'mixed', 'women']:
        # for division in ['women']:
            try:
                update(division)
                current_games(division, datetime(2015, 06, 12, 12, 31, 00))
            except:
                print >> sys.stderr, "failed to update {0} division".format(division)
                traceback.print_exc()
                time.sleep(120)
                continue

        time.sleep(3*60)


if __name__ == "__main__":
    main()
